*********************************************************************
*
* Draw fireworks.
*
fireworks:
       .proc
       bl   @screen_clear
       li   r0,fireworks_box_tiles
       mov  r0,@tile_start_ptr
       li   r0,>160e
       li   r1,furniture_fireworks_box
       bl   @furniture_draw
       li   r2,>005c                   ; Was >00b8
       li   r0,fireworks_tiles
       mov  r0,@tile_start_ptr
fireworks_1:
       .push r2
       bl   @fireworks_draw
       .pop r2
       dec  r2
       jne  fireworks_1
       bl   @mute_sound
       .endproc
*// fireworks

*********************************************************************
*
* Animate the fireworks.
* The fireworks are update by the use of a script, which holds the position and bitmap of every frame of the animation.
*
fireworks_draw:
       .proc
       li   r4,firework_ptrs           ; Address of table that points to the current info on each firework.
       li   r5,10                      ; Number of fireworks to display / update.
fireworks_draw_0:
       bl   @vsync_and_sound
       mov  @2(r4),r6                  ; DE Get the current frame for current firework, from the script.
       mov  @4(r4),r7                  ; HL Get the end address of firework script.
       ai   r6,6                       ; Move address onto the next pair of firework info in the script.
       c    r6,r7                      ; See if address has reached the end of the script.
       jeq  firework_reset             ; Skip on if so
       mov  r6,@2(r4)                  ; Store new address for next time.
fireworks_draw_2:
       li   r8,2
fireworks_draw_1:
       movb *r6+,r0                    ; Get tile
       movb *r6+,@r1lb                 ; Get position x
       movb *r6+,r1                    ; Get position y
       mov  @6(r4),r2                  ; Get colour
       cb   r0,@byte_fe                ; Check for special commands in the tile value.
       jne  fireworks_draw_1a
       bl   @firework_explode
       jmp  fireworks_draw_1c
fireworks_draw_1a:
       cb   r0,@byte_fd
       jne  fireworks_draw_1b
       bl   @firework_erase
       jmp  fireworks_draw_1c
fireworks_draw_1b:
       cb   r0,@byte_fb
       jne  fireworks_draw_1c
       bl   @firework_split
       jmp  fireworks_draw_1c
fireworks_draw_1c:
       inct r1                         ; Position right by two cells and draw.
       bl   @tile_draw
       dec  r8
       jne  fireworks_draw_1
       ai   r4,8                       ; Address of next firework.
       dec  r5
       jne  fireworks_draw_0           ; Next
       .endproc
*      Reset firework.
firework_reset:
       bl   @rand                      ; Create a random color
       andi r0,>f000
       ci   r0,>2000
       jl   firework_reset
       ori  r0,>0100
       mov  r0,@6(r4)
       mov  *r4,r6                     ; Get start address of script and put into 'current' pointer.
       mov  r6,@2(r4)
       jmp  fireworks_draw_2
*// fireworks_draw

*********************************************************************
*
* Start explosion animation.
*
firework_explode:
       .proc
       li   r0,>1000                   ; Draws the two tiles that make up an exploding firework.
       inct r1
       .push r1
       bl   @tile_draw
       .pop r1
       ab   r13,r0
       inc  r1
       .push r0
       .push r1
       .push r2
       bl   @tile_draw
       bl   @play_explosion
       .pop r2
       .pop r1
       .pop r0
       ab   r13,r0
       .endproc
*// firework_explode

*********************************************************************
*
* Erase firework frame.
*
firework_erase:
       .proc
       clr  r0                         ; Draw two blank tiles over the firework.
       inct r1
       .push r1
       bl   @tile_draw
       .pop r1
       inc  r1
       .push r1
       bl   @tile_draw
       .pop r1
       .endproc
*// firework_erase

*********************************************************************
*
* Draw firework splitting into three.
*
firework_split:
       .proc
       li   r0,>1300                   ; Draws two tiles that show a firework splitting.
       inct r1
       .push r1
       bl   @tile_draw
       .pop r1
       ab   r13,r0
       inc  r1
       .push r1
       bl   @tile_draw
       .pop r1
       ab   r13,r0
       .endproc
*// firework_split

*********************************************************************
*
* Table of pointers for each firework.
*
       even
* Firework 1.
firework_ptrs:
       equ  $
LB71B  data LB761                      ; Start of firework script.
LB71D  data LB761                      ; Current address
LB71F  data LB7D9                      ; End of script.
LB721  data attr_42                    ; Colour of firework.
* Firework 2.
LB722  data LB7DA
LB724  data LB7FE
LB726  data LB852
LB728  data attr_43
* Firework 3.
LB729  data LB853
LB72B  data LB853
LB72D  data LB8D7
LB72F  data attr_44
* Firework 4.
LB730  data LB8D8
LB732  data LB8D8
LB734  data LB974
LB736  data attr_45
* Firework 5.
LB737  data LB975
LB739  data LB999
LB73B  data LB9F9
LB73D  data attr_46
* Firework 6.
LB73E  data LB9FA
LB740  data LB9FA
LB742  data LBA96
LB744  data attr_47
* Firework 7.
LB745  data LBA97
LB747  data LBABB
LB749  data LBB33
LB74B  data attr_42
* Firework 8.
LB74C  data LBB34
LB74E  data LBB3A
LB750  data LBB9A
LB752  data attr_43
* Firework 9.
LB753  data LBB9B
LB755  data LBBBF
LB757  data LBC01
LB759  data attr_44
* Firework 10.
LB75A  data LBC02
LB75C  data LBC26
LB75E  data LBC9E
LB760  data attr_45
