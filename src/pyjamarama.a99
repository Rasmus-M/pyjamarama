*********************************************************************
*
* Pyjamarama
* For the TI-99/4A home computer
*
* November 2018
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*
*********************************************************************

       def  main

**
* Assembly options
*
immunity:
       equ  0

**
* Constants
*
start_room:
       equ  1
attr_40:                               ; Black
       equ  >1100
attr_41:                               ; Blue
       equ  >5100
attr_42:                               ; Red
       equ  >8100
attr_43:                               ; Magenta
       equ  >d100
attr_44:                               ; Green
       equ  >2100
attr_45:                               ; Cyan
       equ  >7100
attr_46:                               ; Yellow
       equ  >b100
attr_47:                               ; White
       equ  >f100
sprite_table_size:
       equ  32
sprite_pattern_map_size:
       equ  200
sprite_bitmap_map_size:
       equ  64

**
* Memory mapped addresses
*
vdpwd  equ  >8c00                      ; VDP write data
vdpwa  equ  >8c02                      ; VDP set read/write address
vdprd  equ  >8800                      ; VDP read data
vdpsta equ  >8802                      ; VDP status
sound  equ  >8400

**
* VDP memory map
*
ptrntb equ  >0000                      ; Pattern table base
sprptb equ  >1800                      ; Sprite pattern table base
colrtb equ  >2000                      ; Color table base
nametb equ  >3800                      ; Name table base
spratb equ  >3C00                      ; Sprite attribute table base 1

**
* Structures
*
sprite_y:
       equ  0
sprite_x:
       equ  1
sprite_pattern:
       equ  2
sprite_color:
       equ  3
sprite_size:
       equ  4

**
* Scratch pad
*
rndsd  equ  >83c0                      ; Random number seed
pad    equ  >8300
wrksp  equ  pad                        ; Workspace
r0lb   equ  wrksp+1                    ; r0 low byte required for VDP routines
r1lb   equ  wrksp+3
r2lb   equ  wrksp+5
r3lb   equ  wrksp+7
r4lb   equ  wrksp+9
r5lb   equ  wrksp+11
r6lb   equ  wrksp+13
r7lb   equ  wrksp+15
r8lb   equ  wrksp+17
r9lb   equ  wrksp+19
stack  equ  pad+>20                    ; Stack (grows up)
padvar equ  stack+>10                  ; Start of pad variables
*
* PAD variables
*
start_room_no:
       equ  padvar
wally_room_no:
       equ  start_room_no+2
wally_lives:
       equ  wally_room_no+2
wally_y:
       equ  wally_lives+2
wally_x:
       equ  wally_y+1
wally_attr:
       equ  wally_x+1
wally_attr_alt:
       equ  wally_attr+1
wally_sprite_1:
       equ  wally_attr_alt+1
wally_sprite_2:
       equ  wally_sprite_1+2
wally_shift_value:
       equ  wally_sprite_2+2
wally_char_aligned:
       equ  wally_shift_value+2
wally_last_dir:
       equ  wally_char_aligned+2
wally_head_countdown:
       equ  wally_last_dir+1
free_byte:
       equ  wally_head_countdown+1
mag_lock_dir:
       equ  free_byte+1
room_0_rock_count:
       equ  mag_lock_dir+1
input_flag:
       equ  room_0_rock_count+2
pocket_1:
       equ  input_flag+2
pocket_2:
       equ  pocket_1+2
tile_flip_vertical:
       equ  pocket_2+2
tile_start_ptr:
       equ  tile_flip_vertical+2
bitmap_x:
       equ  tile_start_ptr+2
bitmap_y:
       equ  bitmap_x+2
food_active_ptr:
       equ  bitmap_y+2
max_sprite:
       equ  food_active_ptr+2
rand_no:
       equ  max_sprite+2
pad_max:
       equ  rand_no+2

**
* Macros
*
       .defm proc
       mov  r11,*r10+
       .endm

       .defm endproc
       dect r10
       mov  *r10,r11
       b    *r11
       .endm

       .defm push
       mov  #1,*r10+
       .endm

       .defm pop
       dect r10
       mov  *r10,#1
       .endm

*********************************************************************
*
* Main program
*
       aorg >a000
main:
       limi 0                          ; Interrupts off
       lwpi wrksp                      ; Setup workspace
       li   r10,stack                  ; Setup stack pointer
       bl   @one_time_init
loop:  bl   @game_start
       mov  @start_room_no,r0
       inc  r0
       ci   r0,30
       jlt  !
       clr  r0
!      mov  r0,@start_room_no
       jmp  loop

*********************************************************************
*
* One time initializations
*
one_time_init:
       .proc
       mov  @rndsd,@rand_no            ; Save random number seed
       li   r15,vdpwd                  ; Do not change
*      Graphics mode
       bl   @bitmap_mode
*      Scratch pad variables
       li   r0,padvar
       li   r2,pad_max-padvar
one_time_init_1:
       clr  *r0+
       dect r2
       jne  one_time_init_1
*      Set start room
       li   r0,start_room
       mov  r0,@start_room_no
*      Choose joystick
       seto @input_flag
       .endproc
*// one_time_init

*********************************************************************
*
* Start a new game
*
game_start:
       .proc
       mov  @start_room_no,@wally_room_no
       bl   @screen_clear
       bl   @init_sprites
       bl   @game_init_stats
       bl   @room_draw
       li   r0,>0001
       li   r1,scoreboard_item
       bl   @furniture_draw
       bl   @inventory_redraw
       bl   @lives_reset
       bl   @milk_draw_full
       li   r0,>9858
       mov  r0,@wally_y
game_loop:
       bl   @vsync
       bl   @vsync
       bl   @wally_draw
       bl   @wally_handler
       bl   @wally_step_check
       bl   @wally_check_for_death
       bl   @wally_test_obj_slots
       bl   @wally_percent_update
       bl   @room_event_caller
       bl   @game_exit_check
       bl   @food_check_pickup
       bl   @room_test_events
       bl   @upload_sprites
       li   r0,KEY_SH
       bl   @check_key
       jeq  game_loop
game_end:
       .endproc
*// game_start

*********************************************************************
*
* Code
*
       copy "game-loop-code.a99"
       copy "test-functions.a99"
       copy "action-functions.a99"
       copy "subroutines.a99"

*********************************************************************
*
* Data
*
byte_ff:
       byte >ff
byte_fe:
       byte >fe
byte_fd:
       byte >fd
byte_fc:
       byte >fc
byte_fb:
       byte >fb
byte_fa:
       byte >fa
byte_f5:
       byte >f5
byte_f4:
       byte >f4
byte_f3:
       byte >f3
byte_ef:
       byte >ef
byte_e9:
       byte >e9
byte_e6:
       byte >e6
byte_de:
       byte >de
byte_d6:
       byte >d6
byte_d0:
       byte >d0
byte_c8:
       byte >c8
byte_c0:
       byte >c0
byte_bf:
       byte >bf
byte_b0:
       byte >b0
byte_aa:
       byte >aa
byte_a8:
       byte >a8
byte_98:
       byte >98
byte_78:
       byte >78
byte_30:
       byte >30
byte_20:
       byte >20
byte_1c:
       byte >1c
byte_1a:
       byte >1a
byte_10:
       byte >10
byte_0f:
       byte >0f
byte_0d:
       byte >0d
byte_0b:
       byte >0b
byte_0c:
       byte >0c
byte_09:
       byte >09
byte_08:
       byte >08
byte_07:
       byte >07
byte_06:
       byte >06
byte_04:
       byte >04
byte_03:
       byte >03
byte_02:
       byte >02
byte_01:
       byte >01
byte_00:
       byte >00
byte_attr_40:                          ; Black
       byte attr_40/256
byte_attr_41:                          ; Blue
       byte attr_41/256
byte_attr_42:                          ; Red
       byte attr_42/256
byte_attr_43:                          ; Magenta
       byte attr_43/256
byte_attr_44:                          ; Green
       byte attr_44/256
byte_attr_45:                          ; Cyan
       byte attr_45/256
byte_attr_46:                          ; Yellow
       byte attr_46/256
byte_attr_47:                          ; White
       byte attr_47/256

       even

* One entry (4 bytes) for each possible sprite
* y, x, pattern no, color
*
* 0: y, x, 08, c
* 1: c0, x, 04, c
* 2: y, x, 04, c <- max_sprite=2
*
sprite_table:
       bss  sprite_table_size*sprite_size

* One entry for each bitmap.
* Value is the VDP pattern no (0, 4, 8, ... fc), or >ff if pattern not uploaded.
*
* 0: 08
* 1: ff
* 2: 04
* 3: ff
* 4: ff
* ...
* 199: ff
sprite_pattern_map:
       bss  sprite_pattern_map_size

* One entry for each of the 64 VDP pattern slots.
* Value is the bitmap no (0, 1, 2, ... 199), or >ff if unoccupied.
*
* 0: ff
* 1: 02
* 2: 00
* 3: ff
* ...
* 63: ff
sprite_bitmap_map:
       bss  sprite_bitmap_map_size

* For garbage collection
       even
sprite_pattern_map_alt:
       bss  sprite_pattern_map_size
sprite_bitmap_map_alt:
       bss  sprite_bitmap_map_size

       copy "room-event-handlers.a99"
       copy "room-logic.a99"
       copy "room-object-slots.a99"
       copy "furniture.a99"
       copy "scoreboard-item.a99"
       copy "object-flags.a99"
       copy "object-found-table.a99"
       copy "food-table.a99"
       copy "bmp-tiles.a99"

attr_table:
       bss  >300

rooms_visited_table:
       bss  30

       data -1

       aorg >2000

       copy "bmp-milk.a99"
       copy "bmp-wally.a99"
       copy "bmp-objects.a99"
       copy "object-text.a99"
       copy "room-data.a99"
       copy "wally-jump-table.a99"

       end  main
