       even
table_test_func_ptrs:
       equ  $
L8211  data test00_wally_pos_check
L8213  data test01_wally_pos_check
L8215  data test02_pocket_check
L8217  data test03_fuel_can_full
L8219  data test04_lift_on
L821B  data test05_lift_floor
L821D  data test06_lift_off
L821F  data test07_help_switch_off
L8221  data test08_boxing_glove_safe

*********************************************************************
*
* Test 00 : Exit position test.
* Input:
* r4  Address of room data after event marker.
*
test00_wally_pos_check:
       movb *r4+,r0                    ; Get x position to test against
       sb   @wally_x,r0                ; Subtract Wally x
       sb   @byte_09,r0
       cb   r0,@byte_ef
       jl   test_00_wally_pos_check_0
       movb *r4+,r0
       sb   @wally_y,r0
       sb   @byte_03,r0
       cb   r0,@byte_fa
       jl   test_00_wally_pos_check_1
       b    @room_test_events_next_cmd
test_00_wally_pos_check_0:
       inc  r4
test_00_wally_pos_check_1:
       b    @room_test_events_endif

*********************************************************************
*
* 89AC: Test 01 : Check for position.
* r4  Address of room data after event marker.
* Data string [01, x pos, y pos]
* On entry HL points to the 'x pos'.
*
test01_wally_pos_check:
       movb  @obj_event_pause,r0       ; Make sure not just done an object pickup / event.
       jne  test01_wally_pos_check_1
       movb *r4+,r0                    ; See if Wally is within range of the event position.
       sb   @wally_x,r0
       sb   @byte_03,r0
       cb   r0,@byte_fa
       jl   test01_wally_pos_check_0
       movb *r4+,r0
       sb   @wally_y,r0
       sb   @byte_03,r0
       cb   r0,@byte_fa
       jl   test01_wally_pos_check_0
       b    @room_test_events_next_cmd ; If he is then run the next event in the data.
test01_wally_pos_check_0:
       inc  r4
test01_wally_pos_check_1:
       b    @room_test_events_endif

*********************************************************************
*
* 89D2: Test 02 : See if Wally is carrying a specific object
* Input
* r4  Points to address of data string holding object index.
*
test02_pocket_check:
       movb *r4+,r0
       cb   r0,@pocket_1+1
       jeq  test02_pocket_check_1
       cb   r0,@pocket_2+1
       jne  test02_pocket_check_2
test02_pocket_check_1:
       b    @room_test_events_next_cmd
test02_pocket_check_2:
       b    @room_test_events_endif

*********************************************************************
*
* 89E3: Test 03 : See if fuel can is full.
*
test03_fuel_can_full:
       movb @flag_fuel_can,r0          ; If the fuel can is...
       jeq  test03_fuel_can_full_1
       b    @room_test_events_next_cmd ; full
test03_fuel_can_full_1:
       b    @room_test_events_endif    ; empty

*********************************************************************
*
* 8B67: Test 04 : Is the lift is on?
*
test04_lift_on:
       movb  @lift_count,r0
       jeq  test04_lift_on_1
       b    @room_test_events_next_cmd ; on
test04_lift_on_1:
       b    @room_test_events_endif    ; off

*********************************************************************
*
* 8B88: Test 05 : Is lift at a specific floor value.
* Input
* r4  Points to address holding value to test for.
* A floor value is different to the level shown on screen. See LiftFloorNo
*
test05_lift_floor:
       movb *r4+,r0                    ; Get value to test for.
       cb   r0,@lift_floor_no          ; See the lift is set to the same value.
       jne  test05_lift_floor_1
       b    @room_test_events_next_cmd ; yes
test05_lift_floor_1:
       b    @room_test_events_endif    ; no

*********************************************************************
*
* 8B76: Test 06 : Is the lift off.
test06_lift_off:
       movb  @lift_count,r0
       jne  test04_lift_off_1
       b    @room_test_events_next_cmd ; off
test04_lift_off_1:
       b    @room_test_events_endif    ; on

*********************************************************************
*
* 8B71: Test 07 : Is the help switch off?
test07_help_switch_off:
       movb @flag_help_switch,r0
       jne  test07_help_switch_off_1
       b    @room_test_events_next_cmd ; off
test07_help_switch_off_1:
       b    @room_test_events_endif    ; on

*********************************************************************
*
* BF72: Test 08 : Is Boxing Glove Trap safe.
* Checks to see if Wally will get hit by the Boxing Glove trap, carrying the towel will stop this.
* This test will act on the trap if it becomes false.
test08_boxing_glove_safe:
     equ    $
;BF72  LD A,(Pocket1)  Is Wally carrying the towel.
;BF75  CP $15
;BF77  JP Z,Room_CllEvnt_NxtCmd  True, next command / test.
;BF7A  LD A,(Pocket2)  Again for pocket 2.
;BF7D  CP $15
;BF7F  JP Z,Room_CllEvnt_NxtCmd
;BF82  LD A,(Wally_RoomNo)  Is Wally in the same room as where the trap has been made active?
;BF85  LD B,A
;BF86  LD A,(BoxingTrap_Room)
;BF89  CP B
;BF8A  JP NZ,Room_CllEvnt_NxtCmd  False, next command / test.
;BF8D  PUSH HL
;BF8E  PUSH DE
;BF8F  PUSH BC
;BF90  LD BC,$0000
;BF93  LD DE,$0101
;BF96  LD HL,$E600
;BF99  CALL Beep_Effect
;BF9C  POP BC
;BF9D  POP DE
;BF9E  POP HL
;BF9F  LD A,$01
;BFA1  LD (DeathFlag),A
;BFA4  LD HL,(BoxingTrap_NextPtr)  Move the trap onto the next room in the list.
;BFA7  LD A,(HL)
;BFA8  LD (BoxingTrap_Room),A
;BFAB  INC HL
;BFAC  LD A,(HL)
;BFAD  CP $FF  If we reach the end of the list, then reset back to start of list.
;BFAF  JR NZ,Action08_BoxingGloveSafe_0
;BFB1  LD HL,BoxingTrap_Rooms
;Action08_BoxingGloveSafe_0  BFB4  LD (BoxingTrap_NextPtr),HL
;BFB7  LD HL,$98E8
;BFBA  LD (BitmapX),HL
;BFBD  LD A,$A5
;BFBF  CALL Bitmap16Draw
;BFC2  LD B,$07
;BFC4  LD C,A
;Action08_BoxingGloveSafe_1  BFC5  PUSH BC
;BFC6  CALL Wally_Erase
;BFC9  LD HL,(Wally_X)
;BFCC  DEC L
;BFCD  DEC L
;BFCE  LD (Wally_X),HL
;BFD1  CALL Wally_Draw
;BFD4  POP BC
;BFD5  LD A,C
;BFD6  LD HL,$98E8
;BFD9  LD (BitmapX),HL
;BFDC  CALL Bitmap16Draw
;BFDF  INC C
;BFE0  INC A
;BFE1  CALL Bitmap16Draw
;BFE4  PUSH BC
;BFE5  CALL Pause_Short
;BFE8  CALL Room_EventCaller
;BFEB  POP BC
;BFEC  DJNZ Action08_BoxingGloveSafe_1
;BFEE  CALL Wally_KnockedDown
;BFF1  LD B,$28
;Action08_BoxingGloveSafe_2  BFF3  PUSH BC
;BFF4  CALL Pause_Short
;BFF7  CALL Room_EventCaller
;BFFA  POP BC
;BFFB  DJNZ Action08_BoxingGloveSafe_2
;BFFD  LD HL,$98E8
;C000  LD (BitmapX),HL
;C003  LD A,$AC
;C005  CALL Bitmap16Draw
;C008  CALL Wally_Erase
;C00B  LD D,$A8
;C00D  LD A,(MilkLevel)
;C010  CP $1A
;C012  JP NC,Wally_Death
;C015  XOR A
;C016  LD (DeathFlag),A
;C019  LD (Wally_JumpDir),A
;C01C  LD (Wally_Dir),A
;C01F  LD A,$10
;C021  LD (Wally_Frame),A
;C024  CALL Wally_Draw
;C027  LD B,$05
;C029  CALL Milk_DecreaseByAmount
;C02C  LD A,$01
;C02E  LD (DeathFlag),A
;C031  LD B,$0A
;Action08_BoxingGloveSafe_3  C033  PUSH BC
;C034  CALL Pause_Short
;C037  CALL Room_EventCaller
;C03A  POP BC
;C03B  DJNZ Action08_BoxingGloveSafe_3
;C03D  XOR A
;C03E  LD (DeathFlag),A
;C041  LD SP,$0000
;C044  JP GameLoop
       b    @room_test_events_endif
