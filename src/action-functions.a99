       even
table_action_func_ptrs:
       equ  $
L8223  data action00_SwapObj  
L8225  data action01_PickUp  
L8227  data action02_EnterRoom  
L8229  data action03_FillBucket  
L822B  data action04_ChargeLaser  
L822D  data action05_DischargeLaser  
L822F  data action06_Emptybucket  
L8231  data action07_FillFuelCan  
L8233  data action08_EmptyFuelCan  
L8235  data action09_LiftOn  
L8237  data action0A_MoveLift  
L8239  data action0B_LiftDec  
L823B  data action0C_LiftLights  
L823D  data action0D_MagnetUnlock  
L823F  data action0E_HelpOn  
L8241  data action0F_HelpOff  
L8243  data action10_LiftOffFromEarth  
L8245  data action11_LiftOffFromMoon  
L8247  data action12_GrabRope  
L8249  data action13_EnterAcrade  
L824B  data action14_Win

*********************************************************************
*
*
*
action00_SwapObj:
       movb @byte_01,@obj_event_pause
       movb *r4+,r0                    ; Get index of object required.
       li   r1,pocket_1+1
       cb   r0,*r1                     ; Check to see if its in pocket 1. If not assumes its in pocket 2.
       jeq  Action00_SwapObj_0
       inct  r1                        ; r1=pocket_2+1
Action00_SwapObj_0:
       mov  @wally_room_no,r3
       sla  r3,1                       ; x2
       a    @wally_room_no,r3          ; x3
       ai   r3,room_obj_slots
       clr  r0
       movb *r3+,@r0lb                 ; Get x
       mov  r0,@bitmap_x
       movb *r3+,@r0lb                 ; Get y
       ai   r0,>10
       mov  r0,@bitmap_y
       movb *r3,@r0lb                  ; Get object in room
       movb *r1,r2                     ; Get index of required object from pocket
       mov  r0,*r1                     ; Put room object into pocket
       movb r2,*r3                     ; Put object, originally in pocket, into room
       movb r2,@r0lb
       ai   r0,>50
       .push r4
       bl   @bitmap_16_draw
       bl   @inventory_redraw
       .pop r4
       b    @room_test_events_then

*********************************************************************
*
* Picks up object in current room.
*
action01_PickUp:
       movb @byte_01,@obj_event_pause  ; Stop continous swapping of objects
       mov  @wally_room_no,r3
       sla  r3,1                       ; x2
       a    @wally_room_no,r3          ; x3
       ai   r3,room_obj_slots
       clr  r0
       movb *r3+,@r0lb                 ; Get x
       mov  r0,@bitmap_x
       movb *r3+,@r0lb                 ; Get y
       ai   r0,>10
       mov  r0,@bitmap_y
       movb *r3,@r0lb                  ; Get object
       movb @pocket_2+1,*r3            ; Pocket 2 -> room
       mov  @pocket_1,@pocket_2        ; Pocket 1 -> pocket 2
       mov  r0,@pocket_1               ; Room -> pocket 1
       movb *r3,@r0lb                  ; Get room object
       ai   r0,>50
       .push r4
       bl   @bitmap_16_draw
       bl   @inventory_redraw
       .pop r4
       b    @room_test_events_then

*********************************************************************
*
* Enters a new room.
*
action02_EnterRoom:
       movb *r4+,@wally_room_no+1      ; Get new room number and set.
       movb *r4+,@wally_x              ; Get new position for wally.
       movb *r4+,@wally_y              ; Get new position for wally.
       .push r4
       bl   @wally_reset               ; Reset Wally's animation ready for new room.
       bl   @room_enter                ; Set up the screen and data.
       .pop r4
       b    @room_test_events_then

*********************************************************************
*
*
*
action03_FillBucket:
       b    @room_test_events_then

*********************************************************************
*
*
*
action04_ChargeLaser:
       b    @room_test_events_then

*********************************************************************
*
*
*
action05_DischargeLaser:
       b    @room_test_events_then

*********************************************************************
*
*
*
action06_Emptybucket:
       b    @room_test_events_then

*********************************************************************
*
*
*
action07_FillFuelCan:
       b    @room_test_events_then

*********************************************************************
*
*
*
action08_EmptyFuelCan:
       b    @room_test_events_then

*********************************************************************
*
*
*
action09_LiftOn:
       b    @room_test_events_then

*********************************************************************
*
*
*
action0A_MoveLift:
       b    @room_test_events_then

*********************************************************************
*
*
*
action0B_LiftDec:
       b    @room_test_events_then

*********************************************************************
*
*
*
action0C_LiftLights:
       b    @room_test_events_then

*********************************************************************
*
*
*
action0D_MagnetUnlock:
       b    @room_test_events_then

*********************************************************************
*
*
*
action0E_HelpOn:
       b    @room_test_events_then

*********************************************************************
*
*
*
action0F_HelpOff:
       b    @room_test_events_then

*********************************************************************
*
*
*
action10_LiftOffFromEarth:
       b    @room_test_events_then

*********************************************************************
*
*
*
action11_LiftOffFromMoon:
       b    @room_test_events_then

*********************************************************************
*
*
*
action12_GrabRope:
       b    @room_test_events_then

*********************************************************************
*
*
*
action13_EnterAcrade:
       b    @room_test_events_then

*********************************************************************
*
*
*
action14_Win:
       b    @room_test_events_then
