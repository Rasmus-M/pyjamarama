*********************************************************************
*
* Pyjamarama
* For the TI-99/4A home computer
*
* Based on the ZX Spectrum disassembly found at http://www.luny.co.uk/
*
* November-December 2018
* Rasmus Moustgaard <rasmus.moustgaard@gmail.com>
*
* Version 1.1: Fix to reset tile ptr when dying in arcade room.
*
*********************************************************************

       def  main

**
* Assembly options
*
immunity:
       equ  0
slow_animations:
       equ  1

**
* Constants
*
start_room:
       equ  >1
pocket_1_start:
       equ  0                          ; The Round Key
pocket_2_start:
       equ  1                          ; The Radio
animation_speed:
       equ  4
sprite_table_size:
       equ  32
sprite_pattern_map_size:
       equ  200
sprite_bitmap_map_size:
       equ  64

**
* ZX Spectrum color attributes and their corresponding TI values
*
attr_40:                               ; Black
       equ  >1100
attr_41:                               ; Blue
       equ  >5100
attr_42:                               ; Red
       equ  >8100
attr_43:                               ; Magenta
       equ  >d100
attr_44:                               ; Green
       equ  >2100
attr_45:                               ; Cyan
       equ  >7100
attr_46:                               ; Yellow
       equ  >b100
attr_47:                               ; White
       equ  >f100

**
* Memory mapped addresses
*
vdpwd  equ  >8c00                      ; VDP write data
vdpwa  equ  >8c02                      ; VDP set read/write address
vdprd  equ  >8800                      ; VDP read data
vdpsta equ  >8802                      ; VDP status
sound  equ  >8400

**
* VDP memory map
*
ptrntb equ  >0000                      ; Pattern table base
sprptb equ  >1800                      ; Sprite pattern table base
colrtb equ  >2000                      ; Color table base
nametb equ  >3800                      ; Name table base
spratb equ  >3C00                      ; Sprite attribute table base 1

**
* Structures
*
sprite_y:
       equ  0
sprite_x:
       equ  1
sprite_pattern:
       equ  2
sprite_color:
       equ  3
sprite_size:
       equ  4

**
* Scratch pad
*
rndsd  equ  >83c0                      ; Random number seed
pad    equ  >8300
wrksp  equ  pad                        ; Workspace
r0lb   equ  wrksp+1                    ; r0 low byte required for VDP routines
r1lb   equ  wrksp+3
r2lb   equ  wrksp+5
r3lb   equ  wrksp+7
r4lb   equ  wrksp+9
r5lb   equ  wrksp+11
r6lb   equ  wrksp+13
r7lb   equ  wrksp+15
r8lb   equ  wrksp+17
r9lb   equ  wrksp+19
sndws  equ  wrksp+>20
stack  equ  sndws+>20                    ; Stack (grows up)
padvar equ  stack+>20                  ; Start of pad variables
*
* PAD variables
*
start_room_no:
       equ  padvar
wally_room_no:
       equ  start_room_no+2
wally_lives:
       equ  wally_room_no+2
demo_flag:
       equ  wally_lives+2
energy_counter:
       equ  demo_flag+2
steps_counter:
       equ  energy_counter+2
wally_y:
       equ  steps_counter+2
wally_x:
       equ  wally_y+1
wally_feet_dy:
       equ  wally_x+1
wally_feet_dx:
       equ  wally_feet_dy+1
wally_feet_frame_offset:
       equ  wally_feet_dx+1
wally_attr:
       equ  wally_feet_frame_offset+2
wally_attr_alt:
       equ  wally_attr+1
wally_sprite_1:
       equ  wally_attr_alt+1
wally_sprite_2:
       equ  wally_sprite_1+2
wally_shift_value:
       equ  wally_sprite_2+2
wally_char_aligned:
       equ  wally_shift_value+2
wally_last_dir:
       equ  wally_char_aligned+2
wally_head_countdown:
       equ  wally_last_dir+1
wally_step_flag:
       equ  wally_head_countdown+1
demo_byte:
       equ  wally_step_flag+1
lift_count:                            ; Lift counter. Everytime Wally leaves the lift this counts down. When it is at zero Wally cannot use the life until he turns it on again.
       equ  demo_byte+1
flag_help_switch:                      ; Flag for the Help Switch.
       equ  lift_count+1
flag_laser_gun:                        ; '0D' Laser gun, Full/Empty
       equ  flag_help_switch+1
flag_water_bucket:                     ; '10' Water bucket, Full/Empty
       equ  flag_laser_gun+1
flag_mag_lock:                         ; Stores the position of the MagLock when drawing.
       equ  flag_water_bucket+1
flag_baddy_init:                       ; When zero the baddies need initialising.
       equ  flag_mag_lock+1
obj_event_pause:                       ; Stops any picking up when set.
       equ  flag_baddy_init+1
flag_fuel_can:                         ; '08' Fuel can, Full/Empty
       equ  obj_event_pause+1
milk_level:                            ; Milk Level. Holds the screen row of the milk level.
       equ  flag_fuel_can+1
death_flag:                            ; Set to one to trigger death.
       equ  milk_level+1
lift_floor_no:                         ; Stores values representing each floor level: (1,3),(2,1),(3,0),(4,2).
       equ  death_flag+1
wally_dir:                             ; Sets current direction when moving. (FF - left, 01 - right)
       equ  lift_floor_no+1
wally_jump_dir:                        ; Copy of last direction when jumping.
       equ  wally_dir+1
wally_frame:                           ; Index to bitmap representing Wally's current frame.
       equ  wally_jump_dir+1
wally_falling:                         ; Set when Wally is falling
       equ  wally_frame+1
wally_jump_count:                      ; Counter for jumping. (0x0C means end of jump.)
       equ  wally_falling+1
is_arcade_mode:                        ; Set to 1 when game is in arcade mode for the Space Invaders room.
       equ  wally_jump_count+1
byte_at_f188:                          ; Copy of wally_head_turned?
       equ  is_arcade_mode+1
wally_head_turned:                     ; Wally turns head when set.
       equ  byte_at_f188+1
flag_rolling_rock:                     ; Flag used for x position of rolling rock
       equ  wally_head_turned+1
flag_balloon:                          ; Flag used for balloon
       equ  flag_rolling_rock+1
flag_food_drawn:                       ; Determines if the food requires drawing if set to 0. A 1 means the food has been drawn.
       equ  flag_balloon+1
input_flag:
       equ  flag_food_drawn+1
pocket_1:
       equ  input_flag+2
pocket_2:
       equ  pocket_1+2
tile_flip_vertical:
       equ  pocket_2+2
tile_start_ptr:
       equ  tile_flip_vertical+2
bitmap_x:
       equ  tile_start_ptr+2
bitmap_y:
       equ  bitmap_x+2
food_active_ptr:
       equ  bitmap_y+2
max_sprite:
       equ  food_active_ptr+2
rand_no:
       equ  max_sprite+2
frame:
       equ  rand_no+2
demo_next_ptr:
       equ  frame+2
demo_run_count:
       equ  demo_next_ptr+2
sfx_addr_1:                            ; Sound fx address channel 1
       equ  demo_run_count+2
sfx_addr_2:                            ; Sound fx address channel 2
       equ  sfx_addr_1+2
sfx_addr_3:                            ; Sound fx address channel 3
       equ  sfx_addr_2+2
sfx_addr_4:                            ; Sound fx address channel 4
       equ  sfx_addr_3+2
sfx_duration_1:                        ; Sound fx counter channel 1
       equ  sfx_addr_4+2
sfx_duration_2:                        ; Sound fx counter channel 2
       equ  sfx_duration_1+2
sfx_duration_3:                        ; Sound fx counter channel 3
       equ  sfx_duration_2+2
sfx_duration_4:                        ; Sound fx counter channel 4
       equ  sfx_duration_3+2
sfx_attn_1:                            ; Sound fx attenuation channel 1
       equ  sfx_duration_4+2
sfx_attn_2:                            ; Sound fx attenuation channel 2
       equ  sfx_attn_1+2
sfx_attn_3:                            ; Sound fx attenuation channel 3
       equ  sfx_attn_2+2
sfx_attn_4:                            ; Sound fx attenuation channel 4
       equ  sfx_attn_3+2
sfx_freq_1:                            ; Sound fx frequency channel 1
       equ  sfx_attn_4+2
sfx_freq_2:                            ; Sound fx frequency channel 2
       equ  sfx_freq_1+2
sfx_freq_3:                            ; Sound fx frequency channel 3
       equ  sfx_freq_2+2
sfx_freq_4:                            ; Sound fx frequency channel 4
       equ  sfx_freq_3+2
music_on:
       equ  sfx_freq_4+2
pad_max:
       equ  music_on+2
**
* Macros
*
       .defm proc
       mov  r11,*r10+
       .endm

       .defm endproc
       dect r10
       mov  *r10,r11
       b    *r11
       .endm

       .defm push
       mov  #1,*r10+
       .endm

       .defm pop
       dect r10
       mov  *r10,#1
       .endm

       .defm peek
       mov  @-2(r10),#1
       .endm

*********************************************************************
*
* Main program
*
       aorg >a000
main:
       limi 0                          ; Interrupts off
       lwpi wrksp                      ; Setup workspace
       li   r10,stack                  ; Setup stack pointer
       bl   @one_time_init
       .ifdef cartridge
       bl   @title_screen
       seto @>6008
       .endif
loop:
       bl   @main_menu
       bl   @game_start
       jmp  loop

*********************************************************************
*
* One time initializations
*
one_time_init:
       .proc
       mov  @rndsd,@rand_no            ; Save random number seed
       li   r13,>0100                  ; Constant 1
       li   r14,>ff00                  ; Constart -1
       li   r15,vdpwd                  ; Do not change
*      Graphics mode
       bl   @bitmap_mode
*      Scratch pad variables
       li   r0,padvar
       li   r2,pad_max-padvar
one_time_init_1:
       clr  *r0+
       dect r2
       jne  one_time_init_1
*      Set start room
       li   r0,start_room
       mov  r0,@start_room_no
*      Choose joystick
       seto @input_flag
       .ifeq supercart,1
       bl   @allstopsfx
       .endif
       .endproc
*// one_time_init

*********************************************************************
*
* Title screen
*
       .ifdef cartridge
title_screen:
       .proc
       li   r0,>01a2                   ; Screen off
       bl   @vwtr
       seto @>600a
       li   r0,ptrntb
       li   r1,>6800
       li   r2,>1800
       bl   @vmbw
       seto @>600c
       li   r0,colrtb
       li   r1,>6800
       li   r2,>1800
       bl   @vmbw
       li   r0,>070f                   ; Border white
       bl   @vwtr
       li   r0,>01e2                   ; Screen on
       bl   @vwtr
       li   r3,240
title_screen_1:
       bl   @vsync
       bl   @any_key
       jne  title_screen_2
       dec  r3
       jne  title_screen_1
title_screen_2:
       li   r0,>01a2                   ; Screen off
       bl   @vwtr
       li   r0,>0701                   ; Border black
       bl   @vwtr
       .endproc
       .endif
*// title_screen

*********************************************************************
*
* Display main menu
*
main_menu:
       .proc
main_menu_5:
       bl   @screen_clear
*      Display screen
       li   r0,bmp_tiles
       mov  r0,@tile_start_ptr
main_menu_3:
       li   r0,str_main_menu
       li   r1,>0003
       bl   @string_draw_double
       .ifeq supercart,1
       abs  @music_on
       jne  !
       bl   @init_music
       .endif
!      li   r0,>01e2                   ; Screen on
       bl   @vwtr
       clr  @frame
main_menu_0:
       bl   @vsync
       .ifeq supercart,1
       bl   @play_music
       .endif
*      Check keys
       li   r0,KEY_1
       bl   @check_key
       jeq  main_menu_1
       seto @input_flag
       movb @byte_47,@str_main_joystick_color
       movb @byte_44,@str_main_keyboard_color
       jmp  main_menu_3
main_menu_1:
       li   r0,KEY_2
       bl   @check_key
       jeq  main_menu_2
       clr  @input_flag
       movb @byte_44,@str_main_joystick_color
       movb @byte_47,@str_main_keyboard_color
       jmp  main_menu_3
main_menu_2:
       inc  @frame
       mov  @frame,r0
       ci   r0,480
       jne  main_menu_4
       bl   @demo
       jmp  main_menu_5
main_menu_4:
       bl   @check_quit
       li   r0,KEY_SP
       bl   @check_key
       jne  main_menu_6
       li   r0,KEY_FI
       bl   @check_key
       jeq  main_menu_0
main_menu_6:
       bl   @mute_sound
       clr  @music_on
       .endproc
*// main_menu

*********************************************************************
*
* Start a new game
*
game_start:
       .proc
       mov  @start_room_no,@wally_room_no
       bl   @screen_clear
       bl   @game_init_stats
       bl   @room_draw
       li   r0,>0001
       li   r1,scoreboard_item
       bl   @furniture_draw
       bl   @inventory_redraw
       bl   @lives_reset
       bl   @milk_draw_full
       bl   @init_sprites
       bl   @wally_init
       bl   @do_game_loop
       .endproc
*// game_start

*********************************************************************
*
* Initialize game data
*
game_init_stats:
*      Don't ignore energy
       clr  @demo_flag
       li   r0,>012c
       mov  r0,@energy_counter
*      Init pockets
       li   r0,pocket_1_start
       mov  r0,@pocket_1
       li   r0,pocket_2_start
       mov  r0,@pocket_2
       li   r0,food_table              ; Reset active food
       mov  r0,@food_active_ptr
*      Clear all the object flags
       li   r2,>16                      .
       li   r0,lift_count
game_init_stats_0:
       clr  *r0+
       dect r2
       jne  game_init_stats_0
*      Reset object positions by filling in the object slots, for each room,
*      with and object index in incremental steps
       li   r0,room_obj_slot_0_obj
       li   r2,>1e
       li   r1,>0200
game_init_stats_1:
       movb r1,*r0+
       inct r0
       ai   r1,>0100
       dec  r2
       jne  game_init_stats_1
*      Clear all object found markers
       li   r0,object_found_table      ;
       li   r2,>20
       clr  r1
game_init_stats_2:
       movb r1,*r0
       inct r0
       dec  r2
       jne  game_init_stats_2
*      Clear all rooms visited
       li   r0,rooms_visited_table
       li   r2,30
game_init_stats_3:
       movb r1,*r0+
       dec  r2
       jne  game_init_stats_3
       clr  @steps_counter
*      Arcade invaders
       li   r0,invaders_first_type+2
       mov  r0,@invaders_type_ptr
       li   r0,>0075
       mov  r0,@invaders_start_frame
       mov  r0,@invaders_current_frame
       inc  r0
       mov  r0,@invaders_next_frame
       clr  @invaders_y_offset
*      Clear frame counter
       clr  @frame
       rt
*// game_init_stats

*********************************************************************
*
* Included code
*
       copy "game-loop-code.a99"
       copy "test-functions.a99"
       copy "action-functions.a99"
       copy "room-event-handlers.a99"
       copy "subroutines.a99"
       copy "arcade_invaders.a99"
       copy "demo.a99"
       copy "sound.a99"
       .ifeq supercart,1
       copy "tiplayer-code.a99"
       copy "tiplayersfx.a99"
       copy "fireworks.a99"
       .endif

*********************************************************************
*
* Data
*
       copy "byte-constants.a99"
       copy "room-object-slots.a99"        ; Read-write
       copy "object-found-table.a99"       ; Read-write
       copy "food-table.a99"               ; Read-write
       copy "strings.a99"                  ; Read-write
       copy "furniture.a99"                ; Read
       copy "wally-resurrect-table.a99"    ; Read
       copy "room-logic.a99"               ; Read
       .ifeq supercart,0
       copy "scoreboard-item.a99"          ; Read
       copy "roll-rock.a99"                ; Read
       copy "bmp-tiles.a99"                ; Read
       .endif

**
* Sprite tables
*
* One entry (4 bytes) for each possible sprite
* y, x, pattern no, color
*
* 0: y, x, 08, c
* 1: c0, x, 04, c
* 2: y, x, 04, c <- max_sprite=2
*
sprite_table:
       bss  sprite_table_size*sprite_size  ; Read-write

* One entry for each bitmap.
* Value is the VDP pattern no (0, 4, 8, ... fc), or >ff if pattern not uploaded.
*
* 0: 08
* 1: ff
* 2: 04
* 3: ff
* 4: ff
* ...
* 199: ff
sprite_pattern_map:
       bss  sprite_pattern_map_size        ; Read-write

* One entry for each of the 64 VDP pattern slots.
* Value is the bitmap no (0, 1, 2, ... 199), or >ff if unoccupied.
*
* 0: ff
* 1: 02
* 2: 00
* 3: ff
* ...
* 63: ff
sprite_bitmap_map:
       bss  sprite_bitmap_map_size         ; Read-write

* For garbage collection of sprite tables
       even
sprite_pattern_map_alt:
       bss  sprite_pattern_map_size        ; Read-write
sprite_bitmap_map_alt:
       bss  sprite_bitmap_map_size         ; Read-write

attr_table:
       bss  >300                           ; Read-write

       data -1

**
* Lower memory
*
       aorg >2000

       copy "bmp-milk.a99"                 ; Read
       copy "bmp-wally.a99"                ; Read
       copy "bmp-objects.a99"              ; Read
       copy "object-text.a99"              ; Read
       copy "room-data.a99"                ; Read
       copy "room-color-table.a99"         ; Read
       copy "wally-jump-table.a99"         ; Read

rooms_visited_table:
       bss  30                             ; Read-write

       data -1

**
* Cartridge space
*
       .ifeq supercart,1

       aorg >6100

       copy "scoreboard-item.a99"          ; Read
       copy "roll-rock.a99"                ; Read
       copy "bmp-tiles.a99"                ; Read
       copy "fireworks-data.a99"           ; Read
music: even
       bcopy "../sound/main-theme.vgm.spf" ; Read

       data -1

       .endif

**
* End of game
*
       end  main
