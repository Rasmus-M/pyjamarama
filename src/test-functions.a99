       even
table_test_func_ptrs:
       equ  $
L8211  data test00_wally_pos_check
L8213  data test01_wally_pos_check
L8215  data test02_pocket_check
L8217  data test03_fuel_can_full
L8219  data test04_lift_on
L821B  data test05_lift_floor
L821D  data test06_lift_off
L821F  data test07_help_switch_off
L8221  data test08_boxing_glove_safe

*********************************************************************
*
* Test 00 : Exit position test.
* Input:
* r4  Address of room data after event marker.
*
test00_wally_pos_check:
       movb *r4+,r0                    ; Get x position to test against
       sb   @wally_x,r0                ; Subtract Wally x
       sb   @byte_09,r0
       cb   r0,@byte_ef
       jl   test_00_wally_pos_check_0
       movb *r4+,r0
       sb   @wally_y,r0
       sb   @byte_03,r0
       cb   r0,@byte_fa
       jl   test_00_wally_pos_check_1
       b    @room_test_events_next_cmd
test_00_wally_pos_check_0:
       inc  r4
test_00_wally_pos_check_1:
       b    @room_test_events_endif

*********************************************************************
*
* 89AC: Test 01 : Check for position.
* r4  Address of room data after event marker.
* Data string [01, x pos, y pos]
* On entry HL points to the 'x pos'.
*
test01_wally_pos_check:
       movb  @obj_event_pause,r0       ; Make sure not just done an object pickup / event.
       jne  test01_wally_pos_check_1
       movb *r4+,r0                    ; See if Wally is within range of the event position.
       sb   @wally_x,r0
       sb   @byte_03,r0
       cb   r0,@byte_fa
       jl   test01_wally_pos_check_0
       movb *r4+,r0
       sb   @wally_y,r0
       sb   @byte_03,r0
       cb   r0,@byte_fa
       jl   test01_wally_pos_check_0
       b    @room_test_events_next_cmd ; If he is then run the next event in the data.
test01_wally_pos_check_0:
       inc  r4
test01_wally_pos_check_1:
       b    @room_test_events_endif

*********************************************************************
*
* 89D2: Test 02 : See if Wally is carrying a specific object
* Input
* r4  Points to address of data string holding object index.
*
test02_pocket_check:
       movb *r4+,r0
       cb   r0,@pocket_1+1
       jeq  test02_pocket_check_1
       cb   r0,@pocket_2+1
       jne  test02_pocket_check_2
test02_pocket_check_1:
       b    @room_test_events_next_cmd
test02_pocket_check_2:
       b    @room_test_events_endif

*********************************************************************
*
* 89E3: Test 03 : See if fuel can is full.
*
test03_fuel_can_full:
       movb @flag_fuel_can,r0          ; If the fuel can is...
       jeq  test03_fuel_can_full_1
       b    @room_test_events_next_cmd ; full
test03_fuel_can_full_1:
       b    @room_test_events_endif    ; empty

*********************************************************************
*
* 8B67: Test 04 : Is the lift is on?
*
test04_lift_on:
       movb  @lift_count,r0
       jeq  test04_lift_on_1
       b    @room_test_events_next_cmd ; on
test04_lift_on_1:
       b    @room_test_events_endif    ; off

*********************************************************************
*
* 8B88: Test 05 : Is lift at a specific floor value.
* Input
* r4  Points to address holding value to test for.
* A floor value is different to the level shown on screen. See LiftFloorNo
*
test05_lift_floor:
       movb *r4+,r0                    ; Get value to test for.
       cb   r0,@lift_floor_no          ; See the lift is set to the same value.
       jne  test05_lift_floor_1
       b    @room_test_events_next_cmd ; yes
test05_lift_floor_1:
       b    @room_test_events_endif    ; no

*********************************************************************
*
* 8B76: Test 06 : Is the lift off.
test06_lift_off:
       movb  @lift_count,r0
       jne  test04_lift_off_1
       b    @room_test_events_next_cmd ; off
test04_lift_off_1:
       b    @room_test_events_endif    ; on

*********************************************************************
*
* 8B71: Test 07 : Is the help switch off?
test07_help_switch_off:
       movb @flag_help_switch,r0
       jne  test07_help_switch_off_1
       b    @room_test_events_next_cmd ; off
test07_help_switch_off_1:
       b    @room_test_events_endif    ; on

*********************************************************************
*
* BF72: Test 08 : Is Boxing Glove Trap safe.
* Checks to see if Wally will get hit by the Boxing Glove trap, carrying the towel will stop this.
* This test will act on the trap if it becomes false.
test08_boxing_glove_safe:
       mov  @pocket_1,r0               ; Is Wally carrying the towel.
       ci   r0,>15
       jeq  test08_boxing_glove_safe_0
       mov  @pocket_2,r0               ; Again for pocket 2.
       ci   r0,>15
       jne  test08_boxing_glove_safe_1
test08_boxing_glove_safe_0:
       b    @room_test_events_next_cmd
test08_boxing_glove_safe_1:
       c    @boxing_trap_room,@wally_room_no    ; Is Wally in the same room as where the trap has been made active?
       jne  test08_boxing_glove_safe_0          ; False, next command / test.
       mov  @boxing_trap_next_ptr,r0   ; Move the trap onto the next room in the list.
       movb *r0+,@boxing_trap_room+1   ; Value for next time
       cb   *r0,r14                    ; If we reach the end of the list, then reset back to start of list.
       jne  test08_boxing_glove_safe_2
       li   r0,boxing_trap_rooms
test08_boxing_glove_safe_2:
       .push r4
       mov  r0,@boxing_trap_next_ptr
       bl   @play_glove
       movb r13,@death_flag       ; Die
       li   r0,>00e8
       mov  r0,@bitmap_x
       li   r0,>0098
       mov  r0,@bitmap_y
       li   r0,>00a5
       li   r2,8
test08_boxing_glove_safe_3:
       .push r0
       .push r2
       bl   @bitmap_16_draw
       .pop r2
       sb   @byte_02,@wally_x
       bl   @animation_frame
       .pop r0
       inc  r0
       dec  r2
       jne  test08_boxing_glove_safe_3
       bl   @wally_knocked_down
       li   r2,>28
test08_boxing_glove_safe_4:
       bl   @animation_frame
       dec  r2
       jne  test08_boxing_glove_safe_4
       bl   @bitmap_16_erase
       bl   @wally_erase
       movb @milk_level,r0
       cb   r0,@byte_1a
       jl   test08_boxing_glove_safe_5
       b    @wally_death
test08_boxing_glove_safe_5:
       clr  r0
       movb r0,@death_flag
       movb r0,@wally_jump_dir
       movb r0,@wally_dir
       movb @byte_10,@wally_frame
       bl   @wally_draw
       li   r0,5
       bl   @milk_decrease_by_amount
       movb r13,@death_flag
       li   r2,10
test08_boxing_glove_safe_6:
       .push r2
       bl   @room_event_caller
       bl   @upload_sprites
       .pop r2
       dec  r2
       jne  test08_boxing_glove_safe_6
       szcb r14,@death_flag
       .pop r4
       b    @room_test_events_end

* Boxing Glove Trap details.
boxing_trap_room:                      ; Holds the index of the room that springs the next boxing glove trap on a door.
       data >0008
boxing_trap_next_ptr:                  ; Holds address of next room in the table.
       data boxing_trap_rooms
boxing_trap_rooms:                     ; Table of rooms where the trap can appear.
       byte >11,>0F,>03,>07
       byte >01,>14,>0A,>FF            ; End of table.
