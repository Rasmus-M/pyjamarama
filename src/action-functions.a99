       even
table_action_func_ptrs:
       equ  $
L8223  data action00_swap_obj
L8225  data action01_pick_up
L8227  data action02_enter_room
L8229  data action03_fill_bucket
L822B  data action04_charge_laser
L822D  data action05_discharge_laser
L822F  data action06_empty_bucket
L8231  data action07_fill_fuel_can
L8233  data action08_empty_fuel_can
L8235  data action09_lift_on
L8237  data action0a_move_lift
L8239  data action0b_lift_dec
L823B  data action0c_lift_lights
L823D  data action0d_magnet_unlock
L823F  data action0e_help_on
L8241  data action0f_help_off
L8243  data action10_lift_off_from_earth
L8245  data action11_lift_off_from_moon
L8247  data action12_grab_rope
L8249  data action13_enter_arcade
L824B  data action14_win

*********************************************************************
*
* Swap objects.
*
action00_swap_obj:
       movb r13,@obj_event_pause
       movb *r4+,r0                    ; Get index of object required.
       li   r1,pocket_1+1
       cb   r0,*r1                     ; Check to see if its in pocket 1. If not assumes its in pocket 2.
       jeq  action00_swap_obj_1
       inct  r1                        ; r1=pocket_2+1
action00_swap_obj_1:
       mov  @wally_room_no,r3
       sla  r3,1                       ; x2
       a    @wally_room_no,r3          ; x3
       ai   r3,room_obj_slots
       clr  r0
       movb *r3+,@r0lb                 ; Get x
       mov  r0,@bitmap_x
       movb *r3+,@r0lb                 ; Get y
       ai   r0,>10
       mov  r0,@bitmap_y
       movb *r3,@r0lb                  ; Get object in room
       movb *r1,r2                     ; Get index of required object from pocket
       mov  r0,*r1                     ; Put room object into pocket
       movb r2,*r3                     ; Put object, originally in pocket, into room
       movb r2,@r0lb
       ai   r0,>50
       .push r4
       bl   @bitmap_16_draw
       bl   @inventory_redraw
       .pop r4
       b    @room_test_events_then

*********************************************************************
*
* Picks up object in current room.
*
action01_pick_up:
       movb r13,@obj_event_pause  ; Stop continous swapping of objects
       mov  @wally_room_no,r3
       sla  r3,1                       ; x2
       a    @wally_room_no,r3          ; x3
       ai   r3,room_obj_slots
       clr  r0
       movb *r3+,@r0lb                 ; Get x
       mov  r0,@bitmap_x
       movb *r3+,@r0lb                 ; Get y
       ai   r0,>10
       mov  r0,@bitmap_y
       movb *r3,@r0lb                  ; Get object
       movb @pocket_2+1,*r3            ; Pocket 2 -> room
       mov  @pocket_1,@pocket_2        ; Pocket 1 -> pocket 2
       mov  r0,@pocket_1               ; Room -> pocket 1
       movb *r3,@r0lb                  ; Get room object
       ai   r0,>50
       .push r4
       bl   @bitmap_16_draw
       bl   @inventory_redraw
       .pop r4
       b    @room_test_events_then

*********************************************************************
*
* Enters a new room.
*
action02_enter_room:
       movb *r4+,@wally_room_no+1      ; Get new room number and set.
       movb *r4+,@wally_x              ; Get new position for wally.
       movb *r4+,@wally_y              ; Get new position for wally.
       .push r4
       bl   @wally_reset               ; Reset Wally's animation ready for new room.
       bl   @room_enter                ; Set up the screen and data.
       .pop r4
       b    @room_test_events_then

*********************************************************************
*
* Fills the bucket.
*
action03_fill_bucket:
       movb @flag_water_bucket,r0      ; Don't bother if the bucket is already full.
       jne  action03_fill_bucket_1
       movb r13,@flag_water_bucket
       .push r4
       bl   @inventory_redraw
       .pop r4
action03_fill_bucket_1:
       b    @room_test_events_then

*********************************************************************
*
* Charges the Laser Gun.
*
action04_charge_laser:
       movb @flag_laser_gun,r0         ; Don't bother if the gun is already charged.
       jne  action04_charge_laser_1
       movb r13,@flag_laser_gun        ; Charge the gun.
       .push r4
       bl   @inventory_redraw          ; Update the inventory on screen.
       .pop r4
action04_charge_laser_1:
       b    @room_test_events_then

*********************************************************************
*
* Discharges the laser.
*
action05_discharge_laser:
       szcb r14,@flag_laser_gun
       b    @room_test_events_then

*********************************************************************
*
* Empties the Bucket.
*
action06_empty_bucket:
       szcb r14,@flag_water_bucket
       b    @room_test_events_then

*********************************************************************
*
* Fills the Fuel Can.
*
action07_fill_fuel_can:
       movb @flag_fuel_can,r0          ; Don't bother if the can is already full.
       jne  action07_fill_fuel_can_1
       movb r13,@flag_fuel_can    ; Fill the Fuel Can.
       .push r4
       bl   @inventory_redraw          ; Update the inventory on screen.
       .pop r4
action07_fill_fuel_can_1:
       b    @room_test_events_then

*********************************************************************
*
* Empties the Fuel Can.
*
action08_empty_fuel_can:
       szcb r14,@flag_fuel_can
       b    @room_test_events_then

*********************************************************************
*
* Switches on the lift.
*
action09_lift_on:
       movb @byte_04,@lift_count       ; Switch on.
       li   r1,>78                     ; Set position of switch.
       li   r2,>88
action_update:
       li   r0,>0071
       mov  r1,@bitmap_x
       mov  r2,@bitmap_y
       .push r4
       bl   @bitmap_16_draw            ; Draw the ON switch.
       .pop r4
       b    @room_test_events_then

*********************************************************************
*
* Moves the lift to a given floor value.
*
action0a_move_lift:
       movb *r4+,@lift_floor_no
       b    @room_test_events_then

*********************************************************************
*
* Decrease lift count by one.
*
action0b_lift_dec:
       sb   r13,@lift_count
       b    @room_test_events_then

*********************************************************************
*
* Set lift lighting
*
action0c_lift_lights:
       clr  r0
       movb *r4+,@r0lb                 ; Get index of light to be lit.
*      Colour all lights bright red by changing their colour on screen.
       li   r5,>0c08
       li   r6,0
action0c_lift_lights_1:
       li   r2,attr_42
       c    r6,r0
       jne  action0c_lift_lights_2
       li   r2,attr_47
action0c_lift_lights_2:
       mov  r5,r1
       bl   @set_attribute
       ai   r5,>0006
       inc  r6
       ci   r6,4
       jlt  action0c_lift_lights_1
       b    @room_test_events_then

*********************************************************************
*
* Unlocks magentic lock by coloring the platforms.
*
action0d_magnet_unlock:
       seto @mag_lock_dir
       li   r0,action0d_platforms
       li   r2,attr_45
       li   r5,9
action0d_magnet_unlock_1:
       mov  *r0,r1
       bl   @set_attribute
       mov  *r0+,r1
       inc  r1
       bl   @set_attribute
       dec  r5
       jne  action0d_magnet_unlock_1
       b    @room_test_events_then
action0d_platforms:
       data >140d,>130f,>1211,>1113,>1015,>1117,>1219,>131b,>141d

*********************************************************************
*
* Switches the help on.
*
action0e_help_on:
       movb r13,@flag_help_switch ; Switch on.
       li   r1,>78
       li   r2,>60
       b    @action_update

*********************************************************************
*
* Switch help off.
*
action0f_help_off:
       szcb r14,@flag_help_switch
       b    @room_test_events_then

*********************************************************************
*
* Lift off from Earth.
*
action10_lift_off_from_earth:
       li   r8,>06c0                   ; VDP address 7*256+24*8
       li   r9,17                      ; Height in rows
lift_off_0:
       .push r4
       bl   @wally_erase
*      Read bitmap from VDP
       mov  r8,r0                      ; VDP address
       li   r1,attr_table              ; Use attribute table aa buffer
       mov  r9,r2                      ; Rows
lift_off_1:
       bl   @vrad
       li   r3,3                       ; Columns
lift_off_2:
       li   r4,8                       ; Lines per row
lift_off_3:
       movb @vdprd,*r1+
       inct r1
       dec  r4
       jne  lift_off_3
       ai   r1,-23
       dec  r3
       jne  lift_off_2
       ai   r0,>0100
       ai   r1,21
       dec  r2
       jne  lift_off_1
*      Pad with zeroes
       li   r2,24
lift_off_7:
       clr  *r1+
       dect r2
       jne  lift_off_7
*      Write bitmap to VDP x times
       li   r5,attr_table
       mov  r9,r6                      ; Lines
       sla  r6,3
       ai   r6,7
lift_off_8:
       bl   @vsync_and_sound
       mov  r8,r0
       mov  r5,r1
       mov  r6,r2
       srl  r2,3
       jeq  lift_off_9
lift_off_4:
       bl   @vwad
       li   r3,3                       ; Columns
lift_off_5:
       li   r4,4
lift_off_6:
       movb *r1+,*r15
       inct r1
       movb *r1+,*r15
       inct r1
       dec  r4
       jne  lift_off_6
       ai   r1,-23
       dec  r3
       jne  lift_off_5
       ai   r0,>0100
       ai   r1,21
       dec  r2
       jne  lift_off_4
       ai   r5,3
       dec  r6
       jne  lift_off_8
lift_off_9:
       .pop r4
       abs  @demo_flag
       jne  !
       b    @room_test_events_then
!      b    @demo_10

*********************************************************************
*
* Lift off from Moon.
*
action11_lift_off_from_moon:
       li   r8,>0510                   ; VDP address 5*256+2*8
       li   r9,16                      ; Height in rows
       b    @lift_off_0

*********************************************************************
*
* Grab rope and slide down bannister.
*
action12_grab_rope:
       .push r4
       movb @byte_10,@wally_frame      ; Face Wally the correct way.
action12_grab_rope_0:
       sb   @byte_02,@wally_y          ; Move up two pixels.
       cb   @wally_y,@byte_70          ; Check to see if reach the bannister.
       jle  action12_grab_rope_1
       bl   @animation_frame
       jmp  action12_grab_rope_0
action12_grab_rope_1:                  ; Move horizontally
       ab   @byte_02,@wally_x
       cb   @wally_x,@byte_e8
       jhe  action12_grab_rope_2
       bl   @animation_frame
       jmp  action12_grab_rope_1
action12_grab_rope_2:                  ; Change room
       li   r0,>3038
       mov  r0,@wally_y
       li   r0,>000d
       mov  r0,@wally_room_no
       bl   @wally_reset
       movb @byte_9b,@wally_frame
       bl   @room_enter
       li   r2,>44
action12_grab_rope_3:                  ; Slide down bannister
       ab   @byte_02,@wally_x
       ab   r13,@wally_y
       bl   @animation_frame
       dec  r2
       jne  action12_grab_rope_3
       movb @byte_10,@wally_frame      ; Face Wally the correct way.
       .pop r4
       b    @room_test_events_endif

*********************************************************************
*
* Sets up the Arcade Room
*
action13_enter_arcade:
       li   r0,sfx_leave_room
       li   r1,2
       bl   @play_sfx_and_wait
       li   r0,>9810                   ; Position Wally to the left.
       mov  r0,@wally_y
       bl   @wally_reset               ; Make sure Wally isn't jumping etc.
       bl   @invaders_init_x_pos
       bl   @invaders_init_y_pos
       bl   @invaders_init
       movb r13,@is_arcade_mode
       clr  @invaders_bullet_sprite
       li   r10,stack+2                ; Reset stack
       b    @invaders_loop

*********************************************************************
*
* Won the game
*
action14_win:
;      TODO: ring alarm clock
       .ifeq include_fireworks,1
       bl   @fireworks
       .endif
       b    @screen_congrats
